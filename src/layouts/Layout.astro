---
import Breadcrumbs, {
  type BreadcrumbItem,
} from "@/components/Breadcrumbs.astro";
import { TailwindIndicator } from "@/components/ui/tailwind-indicator";
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/header/Header.astro";
import Footer from "@/components/Footer.astro";

interface Props {
  title: string;
  description: string;
  breadcrumbs?: BreadcrumbItem[];
}

const { title, description, breadcrumbs } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <div class="flex h-fit min-h-screen flex-col font-sans antialiased">
      <Header>
        <Breadcrumbs
          slot="subheader-left"
          class="border-t sm:border-y py-2 px-4 sm:border-none"
          items={breadcrumbs}
        />
      </Header>

      <main>
        <slot />
        <TailwindIndicator />
      </main>
      <Footer />
    </div>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
